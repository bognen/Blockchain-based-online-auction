// 1. truffle compile
// 2. truffle migrate
// 3. launch node index.js

const Web3 = require('web3');
const abiDecoder = require('ethereumjs-abi');
const Provider = require('@truffle/hdwallet-provider');
const MainContract = require('./../smart-contracts/build/contracts/FairAuctionMainContract.json');
const AuctionTemplate = require('./../smart-contracts/build/contracts/Auction.json');

// Address and private key in this case determine me as a contract owner
const address = '0x9F21fA2f0E98EBfe0DC2459dbe73b5F9fA7C3F48';                             // Use very last entry of generated by Ganache
const privateKey = 'eed66370a2f840b3d65115cdcf34b1f7e052922273fe623e50fa718d99c42dbb';    // Use very last entry of generated by Ganache
const infuraUrl = 'http://127.0.0.1:7545'                                             // Taken from ganache

const init = async () => {
      const provider = new Provider(privateKey, infuraUrl);
      const web3 = new Web3(provider);
      const networkId = await web3.eth.net.getId();
      // A contract can be deployed from here. See my chatGpt
      const mainContract = new web3.eth.Contract(
        MainContract.abi,
        MainContract.networks[networkId].address
      );

      // Deploy new auction
      console.log("Deploying new contract...");
      let nowStamp = Math.floor(Date.now() / 1000);
      let tomStamp = nowStamp + 86400;

      let newContract = await mainContract.methods.createAuction("oiqweiqpwepiqp", 1550, 1588, false, nowStamp, tomStamp).send({from: address}, (error, result) => {
          if (error) {
            console.error("An error occurred >> ", error);
            return 0x0;
          }
          return result;
        });
      console.log("New contract address >> ", newContract.events.auctionCreated.returnValues[0]);

      // After a new contract was deployed obtain an instance of created contract
      // const createdAuction = new web3.eth.Contract(
      //   AuctionTemplate.abi,
      //   newContract.events.auctionCreated.returnValues[0]
      // );
      //
      // // Try to send placeBid from the third address
      // const thirdAddress = '0x73E276913Ce4ad756b9f10685835fBBA0120d7b5';
      // const thirdPrivateKey = '5c2895c427e94d62697b8b001fdf6e0e6565ddc1991def746908c79eb1240864';
      //
      // // create a temp singnature
      // const bidAmount = web3.utils.toWei('1', 'ether');
      //
      // const txObject = {
      //   from: thirdAddress,
      //   to: newContract.events.auctionCreated.returnValues[0],
      //   gas: 200000,
      //   data: createdAuction.methods.placeBid().encodeABI(),
      //   value: bidAmount
      // };
      //
      // web3.eth.accounts.signTransaction(txObject, thirdPrivateKey)
      //   .then(signedTx => {
      //     web3.eth.sendSignedTransaction(signedTx.rawTransaction).on('receipt', console.log);
      //   }).catch(err => {
      //     console.log("Err occurred ", err)
      //   });


      // let plaveBidResult = await createdAuction.methods.placeBid().send({
      //     from: thirdAddress,
      //     to: newContract.events.auctionCreated.returnValues[0],
      //     value: 5000
      //   }, (error, result) => {
      //     if (error) {
      //       console.error("An error occurred placing bid >> ", error);
      //       return 0x0;
      //     }
      //     console.log("Obtained result >> ", result)
      //     //return result;
      //   });

      // console.log("Initial Price >> ", await auctionContract.methods.readPrice().call());
      // console.log("Changing price");
      // const receipt = await auctionContract.methods.changePrice().send({from: address});
      // console.log(`Transaction hash: ${receipt.transactionHash}`);
      // console.log(`New price: ${await auctionContract.methods.readPrice().call()}`);
      process.exit();
};


init();
//upload();
