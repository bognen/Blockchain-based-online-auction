# Welcome to Serverless!
# Source: https://www.freecodecamp.org/news/aws-cognito-authentication-with-serverless-and-nodejs/

service: nodejs-sls
# app and org for use with dashboard.serverless.com
#app: fair-auction-blockchain
#org: Khmelnytskyi National University project

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '1'

provider:
  name: aws
  runtime: nodejs16.x
  #stage: dev   ### <<---- Change this to prod
  environment:
    user_pool_id: { Ref: UserPool }
    client_id: { Ref: UserClient }
    dynamodb_main_table: auction-table
    dynamodb_email_account: auction-email-account
    dynamodb_active_bids: active-bids
    dynamodb_historical_bids: historical-bids
    dynamodb_cancelled_bids: cancelled-bids
    node_ip: '44.203.125.119'

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "sns:Subscribe"
        - "sns:Receive"
      Resource: !Ref AuctionSNSTopic
    - Effect: Allow
      Action:
        - "lambda:InvokeFunction"
      Resource: "arn:aws:lambda:${opt:region, self:provider.region}:*:nodejs-sls-dev-snsEventListener"
    - Effect: Allow
      Action:
        - cognito-idp:AdminInitiateAuth
        - cognito-idp:AdminCreateUser
        - cognito-idp:AdminSetUserPassword
      Resource: "*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:UpdateItem"
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.dynamodb_main_table}*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:UpdateItem"
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.dynamodb_historical_bids}*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:UpdateItem"
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.dynamodb_active_bids}*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:UpdateItem"
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.dynamodb_cancelled_bids}*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:Scan"
        - "dynamodb:Query"
        - "dynamodb:BatchWriteItem"
        - "dynamodb:UpdateItem"
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.dynamodb_email_account}*"

functions:
  loginUser:
    handler: auth/login.handler
    events:
      - http:
          path: auth/login
          method: post
          cors: true

  signupUser:
    handler: auth/signup.handler
    events:
      - http:
          path: auth/signup
          method: post
          cors: true

  getAllAuctions:
    handler: api/getAllAuctions.handler
    events:
      - http:
          path: api/get-all-auctions/{promoted}
          method: get
          cors: true

  auctionsByUser:
    handler: api/auctionsByUser.handler
    events:
      - http:
          path: api/auctions-by-user
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
          payload: '2.0'

  auctionDetails:
    handler: api/auctionDetails.handler
    events:
      - http:
          path: api/auction-details/{contractAddress}
          method: get
          cors: true

  auctionBiddingDetails:
    handler: api/auctionBiddingDetails.handler
    events:
      - http:
          path: api/auction-bidding-details/{contractAddress}
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
          payload: '2.0'

  accountDetails:
    handler: api/accountDetails.handler
    events:
      - http:
          path: api/account-details
          method: get
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
          payload: '2.0'
    layers:
      - arn:aws:lambda:us-east-1:780308835025:layer:Web3:3

  createAccount:
    handler: api/createAccount.handler
    events:
      - http:
          path: api/create-account
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
          payload: '2.0'
    layers:
      - arn:aws:lambda:us-east-1:780308835025:layer:Web3:3

  createAuction:
    handler: api/createAuction.handler
    events:
      - http:
          path: api/create-auction
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
          payload: '2.0'
    layers:
      - arn:aws:lambda:us-east-1:780308835025:layer:Web3:3
      - arn:aws:lambda:us-east-1:780308835025:layer:HDDWallet:4

  placeBid:
    handler: api/placeBid.handler
    events:
      - http:
          path: api/place-bid/{contractAddress}
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
          payload: '2.0'
    layers:
      - arn:aws:lambda:us-east-1:780308835025:layer:Web3:3
      - arn:aws:lambda:us-east-1:780308835025:layer:HDDWallet:4

  cancelBid:
    handler: api/cancelBid.handler
    events:
      - http:
          path: api/cancel-bid/{contractAddress}
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
          payload: '2.0'
    layers:
      - arn:aws:lambda:us-east-1:780308835025:layer:Web3:3
      - arn:aws:lambda:us-east-1:780308835025:layer:HDDWallet:4

  cancelAuction:
    handler: api/cancelAuction.handler
    timeout: 15
    events:
      - http:
          path: api/cancel-auction/{contractAddress}
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
          payload: '2.0'
    layers:
      - arn:aws:lambda:us-east-1:780308835025:layer:Web3:3
      - arn:aws:lambda:us-east-1:780308835025:layer:HDDWallet:4

  withdrawFunds:
    handler: api/withdrawFunds.handler
    events:
      - http:
          path: api/withdraw-funds/{contractAddress}
          method: post
          cors: true
          authorizer:
            name: PrivateAuthorizer
            type: COGNITO_USER_POOLS
            arn:
              Fn::GetAtt:
                - UserPool
                - Arn
            claims:
              - email
          payload: '2.0'
    layers:
      - arn:aws:lambda:us-east-1:780308835025:layer:Web3:3
      - arn:aws:lambda:us-east-1:780308835025:layer:HDDWallet:4
  utils:
    handler: utils/helper.handler
  snsEventListener:
    handler: functions/snsListener.handler
    events:
      - sns:
          arn:
            Ref: AuctionSNSTopic
          topicName: auction-sns-topic

# CloudFormation resources
resources:
  Resources:
    UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: blockchain-auction-pool
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes:
          - email
        VerificationMessageTemplate:
          DefaultEmailOption: CONFIRM_WITH_LINK

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: user-pool-ui
        GenerateSecret: false
        UserPoolId: { Ref: UserPool }
        AccessTokenValidity: 5
        IdTokenValidity: 5
        ExplicitAuthFlows:
          - "ADMIN_NO_SRP_AUTH"

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: blockchain-auction-pool-domain
        UserPoolId: !Ref UserPool

    AuctionSNSTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        DisplayName: "Auction SNS Topic"
        TopicName: auction-sns-topic

    MainAuctionTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: auctionAddress
            AttributeType: S
        KeySchema:
          -
            AttributeName: auctionAddress
            KeyType: HASH

        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.dynamodb_main_table}

    HistoricalBidsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: bidder
            AttributeType: S
        KeySchema:
          -
            AttributeName: bidder
            KeyType: HASH

        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.dynamodb_historical_bids}

    EmailAccountTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: email
            KeyType: HASH

        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.dynamodb_email_account}

    ActiveBidsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: auctionAddress
            AttributeType: S
          -
            AttributeName: bidder
            AttributeType: S
        KeySchema:
          -
            AttributeName: auctionAddress
            KeyType: HASH
          -
            AttributeName: bidder
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.dynamodb_active_bids}

    CancelledBidsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: auctionAddress
            AttributeType: S
          -
            AttributeName: bidder
            AttributeType: S
        KeySchema:
          -
            AttributeName: auctionAddress
            KeyType: HASH
          -
            AttributeName: bidder
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.dynamodb_cancelled_bids}

    AuctionSNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        TopicArn: !Ref AuctionSNSTopic
        Protocol: lambda
        Endpoint:
          Fn::GetAtt: [SnsEventListenerLambdaFunction, Arn]
