const Web3 = require('web3');
const Provider = require('@truffle/hdwallet-provider');
const MainContract = require('./../contracts/FairAuctionMainContract.json');

const { sendResponse, deployDataToIPFS } = require("../utils/helper");

// Address and private key in this case this identifies creator of the auction
const address = '0xB1Ba5884CcD1e12c26A66663b5CEdbB0425BeF76';                             // Use very last entry of generated by Ganache
const privateKey = '53ddfd21b966e3a3e61ad3e139c10be70e026f394ee9d17c15d4efef3c7ba375';    // Use very last entry of generated by Ganache
const infuraUrl = 'http://184.73.59.112:8545'                                                 // Taken from ganache

module.exports.handler = async (event) => {
    let imgArr = []
    let strArr = []
    try {
      // TODO: ommit sending data to IPFS
      //let ipfsHash = await deployDataToIPFS(strArr, imgArr);
      const provider = new Provider(privateKey, infuraUrl);
      const web3 = new Web3(provider);
      const networkId = await web3.eth.net.getId();
      // A contract can be deployed from here. See my chatGpt
      const mainContract = new web3.eth.Contract(
        MainContract.abi,
        MainContract.networks[networkId].address
      );

      // Deploy new auction
      console.log("Deploying new contract...");
      let nowStamp = Math.floor(Date.now() / 1000);
      let tomStamp = nowStamp + 84100;

      let newContract = await mainContract.methods.createAuction("yuyuuyuyuyyu", 7, 1, false, nowStamp, tomStamp).send({from: address}, (error, result) => {
          if (error) {
            console.error("An error occurred >> ", error);
            return 0x0;
          }
          return result;
        });
      console.log("New contract address >> ", newContract.events.auctionCreated.returnValues[0]);

    } catch (err) {
      console.log("Something went wrong");
      console.log(err);
      const errorMessage = err.message ? err.message : 'Internal Server Error';
      return sendResponse(500, { errorMessage });
    }
}
